"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const debug_1 = __importDefault(require("debug"));
const json5_1 = __importDefault(require("json5"));
const lodash_1 = require("lodash");
const promisified_functions_1 = require("../utils/promisified-functions");
const option_1 = __importDefault(require("./option"));
const option_source_1 = __importDefault(require("./option-source"));
const resolve_path_relatively_cwd_1 = __importDefault(require("../utils/resolve-path-relatively-cwd"));
const render_template_1 = __importDefault(require("../utils/render-template"));
const warning_message_1 = __importDefault(require("../notifications/warning-message"));
const log_1 = __importDefault(require("../cli/log"));
const formats_1 = require("./formats");
const DEBUG_LOGGER = (0, debug_1.default)('testcafe:configuration');
class Configuration {
    constructor(configurationFilesNames) {
        var _a;
        this._options = {};
        this._defaultPaths = this._resolveFilePaths(configurationFilesNames);
        this._filePath = (_a = this._defaultPaths) === null || _a === void 0 ? void 0 : _a[0];
        this._overriddenOptions = [];
    }
    static _fromObj(obj) {
        const result = Object.create(null);
        Object.entries(obj).forEach(([key, value]) => {
            result[key] = new option_1.default(key, value);
        });
        return result;
    }
    static _showConsoleWarning(message) {
        log_1.default.write(message);
    }
    static _showWarningForError(error, warningTemplate, ...args) {
        const message = (0, render_template_1.default)(warningTemplate, ...args);
        Configuration._showConsoleWarning(message);
        DEBUG_LOGGER(message);
        DEBUG_LOGGER(error);
    }
    static _resolveFilePath(path) {
        if (!path)
            return null;
        return (0, path_1.isAbsolute)(path) ? path : (0, resolve_path_relatively_cwd_1.default)(path);
    }
    _resolveFilePaths(filesNames) {
        if (!filesNames)
            return void 0;
        return (0, lodash_1.castArray)(filesNames).reduce((result, name) => {
            const resolveFilePath = Configuration._resolveFilePath(name);
            if (resolveFilePath)
                result.push(resolveFilePath);
            return result;
        }, []);
    }
    async init() {
        this._overriddenOptions = [];
    }
    mergeOptions(options) {
        Object.entries(options).map(([key, value]) => {
            const option = this._ensureOption(key, value, option_source_1.default.Input);
            if (value === void 0)
                return;
            this._setOptionValue(option, value);
        });
    }
    mergeDeep(option, source) {
        (0, lodash_1.mergeWith)(option.value, source, (targetValue, sourceValue, property) => {
            this._addOverriddenOptionIfNecessary(targetValue, sourceValue, option.source, `${option.name}.${property}`);
            return sourceValue !== void 0 ? sourceValue : targetValue;
        });
    }
    _getOption(key) {
        if (!key)
            return void 0;
        const option = this._options[key];
        if (!option)
            return void 0;
        return option.value;
    }
    getOption(key) {
        return this._getOption(key);
    }
    getOptions(predicate) {
        const result = Object.create(null);
        let includeInResult = true;
        Object.entries(this._options).forEach(([name, option]) => {
            includeInResult = predicate ? predicate(name, option) : true;
            if (includeInResult)
                result[name] = option.value;
        });
        return result;
    }
    clone(nonClonedOptions) {
        const configuration = (0, lodash_1.cloneDeep)(this);
        if (nonClonedOptions) {
            (0, lodash_1.castArray)(nonClonedOptions).forEach(key => {
                if (configuration._options[key])
                    configuration._options[key].value = this._options[key].value;
            });
        }
        return configuration;
    }
    get filePath() {
        return this._filePath;
    }
    get defaultPaths() {
        return this._defaultPaths;
    }
    async _load() {
        var _a;
        if (!((_a = this.defaultPaths) === null || _a === void 0 ? void 0 : _a.length))
            return null;
        const configs = await Promise.all(this.defaultPaths.map(async (filePath) => {
            if (!await this._isConfigurationFileExists(filePath))
                return { filePath, options: null };
            let options = null;
            if (this._isJSConfiguration(filePath))
                options = this._readJsConfigurationFileContent(filePath);
            else {
                const configurationFileContent = await this._readConfigurationFileContent(filePath);
                if (configurationFileContent)
                    options = this._parseConfigurationFileContent(configurationFileContent, filePath);
            }
            return { filePath, options };
        }));
        const existedConfigs = configs.filter(config => !!config.options);
        if (!existedConfigs.length)
            return null;
        this._filePath = existedConfigs[0].filePath;
        if (existedConfigs.length > 1)
            Configuration._showConsoleWarning((0, render_template_1.default)(warning_message_1.default.multipleConfigurationFilesFound, this._filePath));
        return existedConfigs[0].options;
    }
    async _isConfigurationFileExists(filePath = this.filePath) {
        try {
            await (0, promisified_functions_1.stat)(filePath);
            return true;
        }
        catch (error) {
            DEBUG_LOGGER((0, render_template_1.default)(warning_message_1.default.cannotFindConfigurationFile, filePath, error.stack));
            return false;
        }
    }
    static _hasExtension(filePath, extention) {
        return !!filePath && (0, path_1.extname)(filePath) === extention;
    }
    _isJSConfiguration(filePath = this.filePath) {
        return Configuration._hasExtension(filePath, formats_1.JS_CONFIGURATION_EXTENSION);
    }
    _isJSONConfiguration(filePath = this.filePath) {
        return Configuration._hasExtension(filePath, formats_1.JSON_CONFIGURATION_EXTENSION);
    }
    _readJsConfigurationFileContent(filePath = this.filePath) {
        if (filePath) {
            try {
                delete require.cache[filePath];
                return require(filePath);
            }
            catch (error) {
                Configuration._showWarningForError(error, warning_message_1.default.cannotReadConfigFile, filePath);
            }
        }
        return null;
    }
    async _readConfigurationFileContent(filePath = this.filePath) {
        try {
            return await (0, promisified_functions_1.readFile)(filePath);
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotReadConfigFile, filePath);
        }
        return null;
    }
    _parseConfigurationFileContent(configurationFileContent, filePath = this.filePath) {
        try {
            return json5_1.default.parse(configurationFileContent.toString());
        }
        catch (error) {
            Configuration._showWarningForError(error, warning_message_1.default.cannotParseConfigFile, filePath);
        }
        return null;
    }
    _ensureArrayOption(name) {
        const options = this._options[name];
        if (!options)
            return;
        // NOTE: a hack to fix lodash type definitions
        // @ts-ignore
        options.value = (0, lodash_1.castArray)(options.value);
    }
    _ensureOption(name, value, source) {
        let option = null;
        if (name in this._options)
            option = this._options[name];
        else {
            option = new option_1.default(name, value, source);
            this._options[name] = option;
        }
        return option;
    }
    _ensureOptionWithValue(name, defaultValue, source) {
        const option = this._ensureOption(name, defaultValue, source);
        if (option.value !== void 0)
            return;
        option.value = defaultValue;
        option.source = source;
    }
    _addOverriddenOptionIfNecessary(value1, value2, source, optionName) {
        if (source === option_source_1.default.Default)
            return;
        if (value1 === void 0 || value2 === void 0 || value1 === value2 || source !== option_source_1.default.Configuration)
            return;
        this._overriddenOptions.push(optionName);
    }
    _setOptionValue(option, value) {
        if ((0, lodash_1.isPlainObject)(option.value) && (0, lodash_1.isPlainObject)(value))
            this.mergeDeep(option, value);
        else {
            this._addOverriddenOptionIfNecessary(option.value, value, option.source, option.name);
            option.value = value;
        }
        option.source = option_source_1.default.Input;
    }
}
exports.default = Configuration;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZ3VyYXRpb24vY29uZmlndXJhdGlvbi1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQTJDO0FBQzNDLGtEQUEwQjtBQUMxQixrREFBMEI7QUFFMUIsbUNBS2dCO0FBRWhCLDBFQUFnRTtBQUNoRSxzREFBOEI7QUFDOUIsb0VBQTJDO0FBQzNDLHVHQUE0RTtBQUM1RSwrRUFBc0Q7QUFDdEQsdUZBQWdFO0FBQ2hFLHFEQUE2QjtBQUU3Qix1Q0FBcUY7QUFFckYsTUFBTSxZQUFZLEdBQUcsSUFBQSxlQUFLLEVBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUVyRCxNQUFxQixhQUFhO0lBTTlCLFlBQW9CLHVCQUFpRDs7UUFDakUsSUFBSSxDQUFDLFFBQVEsR0FBYSxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBUSxJQUFJLENBQUMsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsU0FBUyxHQUFZLE1BQUEsSUFBSSxDQUFDLGFBQWEsMENBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRVMsTUFBTSxDQUFDLFFBQVEsQ0FBRSxHQUFXO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLGdCQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7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LElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRVMsZUFBZSxDQUFFLE1BQWMsRUFBRSxLQUFrQjtRQUN6RCxJQUFJLElBQUEsc0JBQWEsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksSUFBQSxzQkFBYSxFQUFDLEtBQUssQ0FBQztZQUNuRCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxLQUFlLENBQUMsQ0FBQzthQUN2QztZQUNELElBQUksQ0FBQywrQkFBK0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV0RixNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUN4QjtRQUVELE1BQU0sQ0FBQyxNQUFNLEdBQUcsdUJBQVksQ0FBQyxLQUFLLENBQUM7SUFDdkMsQ0FBQztDQUNKO0FBNVJELGdDQTRSQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dG5hbWUsIGlzQWJzb2x1dGUgfSBmcm9tICdwYXRoJztcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgSlNPTjUgZnJvbSAnanNvbjUnO1xuXG5pbXBvcnQge1xuICAgIGNhc3RBcnJheSxcbiAgICBjbG9uZURlZXAsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBtZXJnZVdpdGgsXG59IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IHJlYWRGaWxlLCBzdGF0IH0gZnJvbSAnLi4vdXRpbHMvcHJvbWlzaWZpZWQtZnVuY3Rpb25zJztcbmltcG9ydCBPcHRpb24gZnJvbSAnLi9vcHRpb24nO1xuaW1wb3J0IE9wdGlvblNvdXJjZSBmcm9tICcuL29wdGlvbi1zb3VyY2UnO1xuaW1wb3J0IHJlc29sdmVQYXRoUmVsYXRpdmVseUN3ZCBmcm9tICcuLi91dGlscy9yZXNvbHZlLXBhdGgtcmVsYXRpdmVseS1jd2QnO1xuaW1wb3J0IHJlbmRlclRlbXBsYXRlIGZyb20gJy4uL3V0aWxzL3JlbmRlci10ZW1wbGF0ZSc7XG5pbXBvcnQgV0FSTklOR19NRVNTQUdFUyBmcm9tICcuLi9ub3RpZmljYXRpb25zL3dhcm5pbmctbWVzc2FnZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2NsaS9sb2cnO1xuaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBKU19DT05GSUdVUkFUSU9OX0VYVEVOU0lPTiwgSlNPTl9DT05GSUdVUkFUSU9OX0VYVEVOU0lPTiB9IGZyb20gJy4vZm9ybWF0cyc7XG5cbmNvbnN0IERFQlVHX0xPR0dFUiA9IGRlYnVnKCd0ZXN0Y2FmZTpjb25maWd1cmF0aW9uJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbmZpZ3VyYXRpb24ge1xuICAgIHByb3RlY3RlZCBfb3B0aW9uczogRGljdGlvbmFyeTxPcHRpb24+O1xuICAgIHByb3RlY3RlZCBfZmlsZVBhdGg/OiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9kZWZhdWx0UGF0aHM/OiBzdHJpbmdbXTtcbiAgICBwcm90ZWN0ZWQgX292ZXJyaWRkZW5PcHRpb25zOiBzdHJpbmdbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoY29uZmlndXJhdGlvbkZpbGVzTmFtZXM6IHN0cmluZyB8IG51bGwgfCBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLl9vcHRpb25zICAgICAgICAgICA9IHt9O1xuICAgICAgICB0aGlzLl9kZWZhdWx0UGF0aHMgICAgICA9IHRoaXMuX3Jlc29sdmVGaWxlUGF0aHMoY29uZmlndXJhdGlvbkZpbGVzTmFtZXMpO1xuICAgICAgICB0aGlzLl9maWxlUGF0aCAgICAgICAgICA9IHRoaXMuX2RlZmF1bHRQYXRocz8uWzBdO1xuICAgICAgICB0aGlzLl9vdmVycmlkZGVuT3B0aW9ucyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzdGF0aWMgX2Zyb21PYmogKG9iajogb2JqZWN0KTogRGljdGlvbmFyeTxPcHRpb24+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICBPYmplY3QuZW50cmllcyhvYmopLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBuZXcgT3B0aW9uKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzdGF0aWMgX3Nob3dDb25zb2xlV2FybmluZyAobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxvZy53cml0ZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfc2hvd1dhcm5pbmdGb3JFcnJvciAoZXJyb3I6IEVycm9yLCB3YXJuaW5nVGVtcGxhdGU6IHN0cmluZywgLi4uYXJnczogVGVtcGxhdGVBcmd1bWVudHMpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHJlbmRlclRlbXBsYXRlKHdhcm5pbmdUZW1wbGF0ZSwgLi4uYXJncyk7XG5cbiAgICAgICAgQ29uZmlndXJhdGlvbi5fc2hvd0NvbnNvbGVXYXJuaW5nKG1lc3NhZ2UpO1xuXG4gICAgICAgIERFQlVHX0xPR0dFUihtZXNzYWdlKTtcbiAgICAgICAgREVCVUdfTE9HR0VSKGVycm9yKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfcmVzb2x2ZUZpbGVQYXRoIChwYXRoOiBzdHJpbmcgfCBudWxsKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGlmICghcGF0aClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIHJldHVybiBpc0Fic29sdXRlKHBhdGgpID8gcGF0aCA6IHJlc29sdmVQYXRoUmVsYXRpdmVseUN3ZChwYXRoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZXNvbHZlRmlsZVBhdGhzIChmaWxlc05hbWVzOiBzdHJpbmcgfCBudWxsIHwgc3RyaW5nW10pOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICghZmlsZXNOYW1lcylcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG5cbiAgICAgICAgcmV0dXJuIGNhc3RBcnJheShmaWxlc05hbWVzKS5yZWR1Y2UoKHJlc3VsdCwgbmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZUZpbGVQYXRoID0gQ29uZmlndXJhdGlvbi5fcmVzb2x2ZUZpbGVQYXRoKG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAocmVzb2x2ZUZpbGVQYXRoKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlc29sdmVGaWxlUGF0aCk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sIFtdIGFzIHN0cmluZ1tdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5pdCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuX292ZXJyaWRkZW5PcHRpb25zID0gW107XG4gICAgfVxuXG4gICAgcHVibGljIG1lcmdlT3B0aW9ucyAob3B0aW9uczogb2JqZWN0KTogdm9pZCB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLl9lbnN1cmVPcHRpb24oa2V5LCB2YWx1ZSwgT3B0aW9uU291cmNlLklucHV0KTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXRPcHRpb25WYWx1ZShvcHRpb24sIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG1lcmdlRGVlcCAob3B0aW9uOiBPcHRpb24sIHNvdXJjZTogb2JqZWN0KTogdm9pZCB7XG4gICAgICAgIG1lcmdlV2l0aChvcHRpb24udmFsdWUsIHNvdXJjZSwgKHRhcmdldFZhbHVlOiBPcHRpb25WYWx1ZSwgc291cmNlVmFsdWU6IE9wdGlvblZhbHVlLCBwcm9wZXJ0eTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hZGRPdmVycmlkZGVuT3B0aW9uSWZOZWNlc3NhcnkodGFyZ2V0VmFsdWUsIHNvdXJjZVZhbHVlLCBvcHRpb24uc291cmNlLCBgJHtvcHRpb24ubmFtZX0uJHtwcm9wZXJ0eX1gKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZVZhbHVlICE9PSB2b2lkIDAgPyBzb3VyY2VWYWx1ZSA6IHRhcmdldFZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE9wdGlvbiAoa2V5OiBzdHJpbmcpOiBPcHRpb25WYWx1ZSB7XG4gICAgICAgIGlmICgha2V5KVxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMDtcblxuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLl9vcHRpb25zW2tleV07XG5cbiAgICAgICAgaWYgKCFvcHRpb24pXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuXG4gICAgICAgIHJldHVybiBvcHRpb24udmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9wdGlvbjxUeXBlPiAoa2V5OiBzdHJpbmcpOiBUeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbihrZXkpIGFzIFR5cGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9wdGlvbnMgKHByZWRpY2F0ZT86IChuYW1lOiBzdHJpbmcsIG9wdGlvbjogT3B0aW9uKSA9PiBib29sZWFuKTogRGljdGlvbmFyeTxPcHRpb25WYWx1ZT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgICAgICAgID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgbGV0IGluY2x1ZGVJblJlc3VsdCA9IHRydWU7XG5cbiAgICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5fb3B0aW9ucykuZm9yRWFjaCgoW25hbWUsIG9wdGlvbl0pID0+IHtcbiAgICAgICAgICAgIGluY2x1ZGVJblJlc3VsdCA9IHByZWRpY2F0ZSA/IHByZWRpY2F0ZShuYW1lLCBvcHRpb24pIDogdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGluY2x1ZGVJblJlc3VsdClcbiAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSBvcHRpb24udmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb25lIChub25DbG9uZWRPcHRpb25zPzogc3RyaW5nIHwgc3RyaW5nW10pOiBDb25maWd1cmF0aW9uIHtcbiAgICAgICAgY29uc3QgY29uZmlndXJhdGlvbiA9IGNsb25lRGVlcCh0aGlzKTtcblxuICAgICAgICBpZiAobm9uQ2xvbmVkT3B0aW9ucykge1xuICAgICAgICAgICAgY2FzdEFycmF5KG5vbkNsb25lZE9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbi5fb3B0aW9uc1trZXldKVxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uLl9vcHRpb25zW2tleV0udmFsdWUgPSB0aGlzLl9vcHRpb25zW2tleV0udmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZmlsZVBhdGggKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWxlUGF0aDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRlZmF1bHRQYXRocyAoKTogc3RyaW5nW10gfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFBhdGhzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBfbG9hZCAoKTogUHJvbWlzZTxudWxsIHwgb2JqZWN0PiB7XG4gICAgICAgIGlmICghdGhpcy5kZWZhdWx0UGF0aHM/Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZ3MgPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLmRlZmF1bHRQYXRocy5tYXAoYXN5bmMgZmlsZVBhdGggPT4ge1xuICAgICAgICAgICAgaWYgKCFhd2FpdCB0aGlzLl9pc0NvbmZpZ3VyYXRpb25GaWxlRXhpc3RzKGZpbGVQYXRoKSlcbiAgICAgICAgICAgICAgICByZXR1cm4geyBmaWxlUGF0aCwgb3B0aW9uczogbnVsbCB9O1xuXG4gICAgICAgICAgICBsZXQgb3B0aW9ucyA9IG51bGwgYXMgb2JqZWN0IHwgbnVsbDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSlNDb25maWd1cmF0aW9uKGZpbGVQYXRoKSlcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGhpcy5fcmVhZEpzQ29uZmlndXJhdGlvbkZpbGVDb250ZW50KGZpbGVQYXRoKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuX3JlYWRDb25maWd1cmF0aW9uRmlsZUNvbnRlbnQoZmlsZVBhdGgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudClcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMuX3BhcnNlQ29uZmlndXJhdGlvbkZpbGVDb250ZW50KGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudCwgZmlsZVBhdGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geyBmaWxlUGF0aCwgb3B0aW9ucyB9O1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgY29uc3QgZXhpc3RlZENvbmZpZ3MgPSBjb25maWdzLmZpbHRlcihjb25maWcgPT4gISFjb25maWcub3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCFleGlzdGVkQ29uZmlncy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICB0aGlzLl9maWxlUGF0aCA9IGV4aXN0ZWRDb25maWdzWzBdLmZpbGVQYXRoO1xuXG4gICAgICAgIGlmIChleGlzdGVkQ29uZmlncy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5fc2hvd0NvbnNvbGVXYXJuaW5nKHJlbmRlclRlbXBsYXRlKFdBUk5JTkdfTUVTU0FHRVMubXVsdGlwbGVDb25maWd1cmF0aW9uRmlsZXNGb3VuZCwgdGhpcy5fZmlsZVBhdGgpKTtcblxuICAgICAgICByZXR1cm4gZXhpc3RlZENvbmZpZ3NbMF0ub3B0aW9ucztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgYXN5bmMgX2lzQ29uZmlndXJhdGlvbkZpbGVFeGlzdHMgKGZpbGVQYXRoID0gdGhpcy5maWxlUGF0aCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgc3RhdChmaWxlUGF0aCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgICAgICBERUJVR19MT0dHRVIocmVuZGVyVGVtcGxhdGUoV0FSTklOR19NRVNTQUdFUy5jYW5ub3RGaW5kQ29uZmlndXJhdGlvbkZpbGUsIGZpbGVQYXRoLCBlcnJvci5zdGFjaykpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfaGFzRXh0ZW5zaW9uIChmaWxlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkLCBleHRlbnRpb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISFmaWxlUGF0aCAmJiBleHRuYW1lKGZpbGVQYXRoKSA9PT0gZXh0ZW50aW9uO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfaXNKU0NvbmZpZ3VyYXRpb24gKGZpbGVQYXRoID0gdGhpcy5maWxlUGF0aCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gQ29uZmlndXJhdGlvbi5faGFzRXh0ZW5zaW9uKGZpbGVQYXRoLCBKU19DT05GSUdVUkFUSU9OX0VYVEVOU0lPTik7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9pc0pTT05Db25maWd1cmF0aW9uIChmaWxlUGF0aCA9IHRoaXMuZmlsZVBhdGgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIENvbmZpZ3VyYXRpb24uX2hhc0V4dGVuc2lvbihmaWxlUGF0aCwgSlNPTl9DT05GSUdVUkFUSU9OX0VYVEVOU0lPTik7XG4gICAgfVxuXG4gICAgcHVibGljIF9yZWFkSnNDb25maWd1cmF0aW9uRmlsZUNvbnRlbnQgKGZpbGVQYXRoID0gdGhpcy5maWxlUGF0aCk6IG9iamVjdCB8IG51bGwge1xuICAgICAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlcXVpcmUuY2FjaGVbZmlsZVBhdGhdO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoZmlsZVBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgICAgICBDb25maWd1cmF0aW9uLl9zaG93V2FybmluZ0ZvckVycm9yKGVycm9yLCBXQVJOSU5HX01FU1NBR0VTLmNhbm5vdFJlYWRDb25maWdGaWxlLCBmaWxlUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgX3JlYWRDb25maWd1cmF0aW9uRmlsZUNvbnRlbnQgKGZpbGVQYXRoID0gdGhpcy5maWxlUGF0aCk6IFByb21pc2U8QnVmZmVyIHwgbnVsbD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlYWRGaWxlKGZpbGVQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICAgICAgQ29uZmlndXJhdGlvbi5fc2hvd1dhcm5pbmdGb3JFcnJvcihlcnJvciwgV0FSTklOR19NRVNTQUdFUy5jYW5ub3RSZWFkQ29uZmlnRmlsZSwgZmlsZVBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcGFyc2VDb25maWd1cmF0aW9uRmlsZUNvbnRlbnQgKGNvbmZpZ3VyYXRpb25GaWxlQ29udGVudDogQnVmZmVyLCBmaWxlUGF0aCA9IHRoaXMuZmlsZVBhdGgpOiBvYmplY3QgfCBudWxsIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09ONS5wYXJzZShjb25maWd1cmF0aW9uRmlsZUNvbnRlbnQudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgIENvbmZpZ3VyYXRpb24uX3Nob3dXYXJuaW5nRm9yRXJyb3IoZXJyb3IsIFdBUk5JTkdfTUVTU0FHRVMuY2Fubm90UGFyc2VDb25maWdGaWxlLCBmaWxlUGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2Vuc3VyZUFycmF5T3B0aW9uIChuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnNbbmFtZV07XG5cbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIC8vIE5PVEU6IGEgaGFjayB0byBmaXggbG9kYXNoIHR5cGUgZGVmaW5pdGlvbnNcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBvcHRpb25zLnZhbHVlID0gY2FzdEFycmF5KG9wdGlvbnMudmFsdWUpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZW5zdXJlT3B0aW9uIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBPcHRpb25WYWx1ZSwgc291cmNlOiBPcHRpb25Tb3VyY2UpOiBPcHRpb24ge1xuICAgICAgICBsZXQgb3B0aW9uID0gbnVsbDtcblxuICAgICAgICBpZiAobmFtZSBpbiB0aGlzLl9vcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9uID0gdGhpcy5fb3B0aW9uc1tuYW1lXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb24gPSBuZXcgT3B0aW9uKG5hbWUsIHZhbHVlLCBzb3VyY2UpO1xuXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zW25hbWVdID0gb3B0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2Vuc3VyZU9wdGlvbldpdGhWYWx1ZSAobmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IE9wdGlvblZhbHVlLCBzb3VyY2U6IE9wdGlvblNvdXJjZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLl9lbnN1cmVPcHRpb24obmFtZSwgZGVmYXVsdFZhbHVlLCBzb3VyY2UpO1xuXG4gICAgICAgIGlmIChvcHRpb24udmFsdWUgIT09IHZvaWQgMClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBvcHRpb24udmFsdWUgID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICBvcHRpb24uc291cmNlID0gc291cmNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfYWRkT3ZlcnJpZGRlbk9wdGlvbklmTmVjZXNzYXJ5ICh2YWx1ZTE6IE9wdGlvblZhbHVlLCB2YWx1ZTI6IE9wdGlvblZhbHVlLCBzb3VyY2U6IE9wdGlvblNvdXJjZSwgb3B0aW9uTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmIChzb3VyY2UgPT09IE9wdGlvblNvdXJjZS5EZWZhdWx0KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICh2YWx1ZTEgPT09IHZvaWQgMCB8fCB2YWx1ZTIgPT09IHZvaWQgMCB8fCB2YWx1ZTEgPT09IHZhbHVlMiB8fCBzb3VyY2UgIT09IE9wdGlvblNvdXJjZS5Db25maWd1cmF0aW9uKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuX292ZXJyaWRkZW5PcHRpb25zLnB1c2gob3B0aW9uTmFtZSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9zZXRPcHRpb25WYWx1ZSAob3B0aW9uOiBPcHRpb24sIHZhbHVlOiBPcHRpb25WYWx1ZSk6IHZvaWQge1xuICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChvcHRpb24udmFsdWUpICYmIGlzUGxhaW5PYmplY3QodmFsdWUpKVxuICAgICAgICAgICAgdGhpcy5tZXJnZURlZXAob3B0aW9uLCB2YWx1ZSBhcyBvYmplY3QpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZE92ZXJyaWRkZW5PcHRpb25JZk5lY2Vzc2FyeShvcHRpb24udmFsdWUsIHZhbHVlLCBvcHRpb24uc291cmNlLCBvcHRpb24ubmFtZSk7XG5cbiAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9uLnNvdXJjZSA9IE9wdGlvblNvdXJjZS5JbnB1dDtcbiAgICB9XG59XG4iXX0=